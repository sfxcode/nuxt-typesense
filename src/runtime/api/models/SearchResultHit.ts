/* tslint:disable */
/* eslint-disable */
/**
 * Typesense API
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 0.25.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SearchHighlight } from './SearchHighlight';
import {
    SearchHighlightFromJSON,
    SearchHighlightFromJSONTyped,
    SearchHighlightToJSON,
} from './SearchHighlight';

/**
 * 
 * @export
 * @interface SearchResultHit
 */
export interface SearchResultHit {
    /**
     * (Deprecated) Contains highlighted portions of the search fields
     * @type {Array<SearchHighlight>}
     * @memberof SearchResultHit
     */
    highlights?: Array<SearchHighlight>;
    /**
     * Highlighted version of the matching document
     * @type {{ [key: string]: any; }}
     * @memberof SearchResultHit
     */
    highlight?: { [key: string]: any; };
    /**
     * Can be any key-value pair
     * @type {{ [key: string]: object; }}
     * @memberof SearchResultHit
     */
    document?: { [key: string]: object; };
    /**
     * 
     * @type {number}
     * @memberof SearchResultHit
     */
    textMatch?: number;
    /**
     * Can be any key-value pair
     * @type {{ [key: string]: number; }}
     * @memberof SearchResultHit
     */
    geoDistanceMeters?: { [key: string]: number; };
    /**
     * Distance between the query vector and matching document's vector value
     * @type {number}
     * @memberof SearchResultHit
     */
    vectorDistance?: number;
}

/**
 * Check if a given object implements the SearchResultHit interface.
 */
export function instanceOfSearchResultHit(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SearchResultHitFromJSON(json: any): SearchResultHit {
    return SearchResultHitFromJSONTyped(json, false);
}

export function SearchResultHitFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchResultHit {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'highlights': !exists(json, 'highlights') ? undefined : ((json['highlights'] as Array<any>).map(SearchHighlightFromJSON)),
        'highlight': !exists(json, 'highlight') ? undefined : json['highlight'],
        'document': !exists(json, 'document') ? undefined : json['document'],
        'textMatch': !exists(json, 'text_match') ? undefined : json['text_match'],
        'geoDistanceMeters': !exists(json, 'geo_distance_meters') ? undefined : json['geo_distance_meters'],
        'vectorDistance': !exists(json, 'vector_distance') ? undefined : json['vector_distance'],
    };
}

export function SearchResultHitToJSON(value?: SearchResultHit | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'highlights': value.highlights === undefined ? undefined : ((value.highlights as Array<any>).map(SearchHighlightToJSON)),
        'highlight': value.highlight,
        'document': value.document,
        'text_match': value.textMatch,
        'geo_distance_meters': value.geoDistanceMeters,
        'vector_distance': value.vectorDistance,
    };
}

