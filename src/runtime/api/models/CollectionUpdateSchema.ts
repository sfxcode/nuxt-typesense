/* tslint:disable */
/* eslint-disable */
/**
 * Typesense API
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 0.25.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Field } from './Field';
import {
    FieldFromJSON,
    FieldFromJSONTyped,
    FieldToJSON,
} from './Field';

/**
 * 
 * @export
 * @interface CollectionUpdateSchema
 */
export interface CollectionUpdateSchema {
    /**
     * A list of fields for querying, filtering and faceting
     * @type {Array<Field>}
     * @memberof CollectionUpdateSchema
     */
    fields: Array<Field>;
}

/**
 * Check if a given object implements the CollectionUpdateSchema interface.
 */
export function instanceOfCollectionUpdateSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "fields" in value;

    return isInstance;
}

export function CollectionUpdateSchemaFromJSON(json: any): CollectionUpdateSchema {
    return CollectionUpdateSchemaFromJSONTyped(json, false);
}

export function CollectionUpdateSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): CollectionUpdateSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fields': ((json['fields'] as Array<any>).map(FieldFromJSON)),
    };
}

export function CollectionUpdateSchemaToJSON(value?: CollectionUpdateSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'fields': ((value.fields as Array<any>).map(FieldToJSON)),
    };
}

