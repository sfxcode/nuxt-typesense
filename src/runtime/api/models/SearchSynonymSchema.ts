/* tslint:disable */
/* eslint-disable */
/**
 * Typesense API
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 0.25.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SearchSynonymSchema
 */
export interface SearchSynonymSchema {
    /**
     * For 1-way synonyms, indicates the root word that words in the `synonyms` parameter map to.
     * @type {string}
     * @memberof SearchSynonymSchema
     */
    root?: string;
    /**
     * Array of words that should be considered as synonyms.
     * @type {Array<string>}
     * @memberof SearchSynonymSchema
     */
    synonyms: Array<string>;
}

/**
 * Check if a given object implements the SearchSynonymSchema interface.
 */
export function instanceOfSearchSynonymSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "synonyms" in value;

    return isInstance;
}

export function SearchSynonymSchemaFromJSON(json: any): SearchSynonymSchema {
    return SearchSynonymSchemaFromJSONTyped(json, false);
}

export function SearchSynonymSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchSynonymSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'root': !exists(json, 'root') ? undefined : json['root'],
        'synonyms': json['synonyms'],
    };
}

export function SearchSynonymSchemaToJSON(value?: SearchSynonymSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'root': value.root,
        'synonyms': value.synonyms,
    };
}

