/* tslint:disable */
/* eslint-disable */
/**
 * Typesense API
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 0.24.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SearchOverrideRule
 */
export interface SearchOverrideRule {
    /**
     * Indicates what search queries should be overridden
     * @type {string}
     * @memberof SearchOverrideRule
     */
    query: string;
    /**
     * Indicates whether the match on the query term should be `exact` or `contains`. If we want to match all queries that contained the word `apple`, we will use the `contains` match instead.
     * @type {string}
     * @memberof SearchOverrideRule
     */
    match: SearchOverrideRuleMatchEnum;
}


/**
 * @export
 */
export const SearchOverrideRuleMatchEnum = {
    Exact: 'exact',
    Contains: 'contains'
} as const;
export type SearchOverrideRuleMatchEnum = typeof SearchOverrideRuleMatchEnum[keyof typeof SearchOverrideRuleMatchEnum];


/**
 * Check if a given object implements the SearchOverrideRule interface.
 */
export function instanceOfSearchOverrideRule(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "query" in value;
    isInstance = isInstance && "match" in value;

    return isInstance;
}

export function SearchOverrideRuleFromJSON(json: any): SearchOverrideRule {
    return SearchOverrideRuleFromJSONTyped(json, false);
}

export function SearchOverrideRuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchOverrideRule {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'query': json['query'],
        'match': json['match'],
    };
}

export function SearchOverrideRuleToJSON(value?: SearchOverrideRule | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'query': value.query,
        'match': value.match,
    };
}

