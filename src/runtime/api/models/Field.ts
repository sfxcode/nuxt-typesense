/* tslint:disable */
/* eslint-disable */
/**
 * Typesense API
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 0.25.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FieldEmbed } from './FieldEmbed';
import {
    FieldEmbedFromJSON,
    FieldEmbedFromJSONTyped,
    FieldEmbedToJSON,
} from './FieldEmbed';

/**
 * 
 * @export
 * @interface Field
 */
export interface Field {
    /**
     * 
     * @type {string}
     * @memberof Field
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Field
     */
    type: string;
    /**
     * 
     * @type {boolean}
     * @memberof Field
     */
    optional?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Field
     */
    facet?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Field
     */
    index?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Field
     */
    locale?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Field
     */
    sort?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Field
     */
    infix?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Field
     */
    numDim?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Field
     */
    drop?: boolean;
    /**
     * 
     * @type {FieldEmbed}
     * @memberof Field
     */
    embed?: FieldEmbed;
}

/**
 * Check if a given object implements the Field interface.
 */
export function instanceOfField(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function FieldFromJSON(json: any): Field {
    return FieldFromJSONTyped(json, false);
}

export function FieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): Field {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'type': json['type'],
        'optional': !exists(json, 'optional') ? undefined : json['optional'],
        'facet': !exists(json, 'facet') ? undefined : json['facet'],
        'index': !exists(json, 'index') ? undefined : json['index'],
        'locale': !exists(json, 'locale') ? undefined : json['locale'],
        'sort': !exists(json, 'sort') ? undefined : json['sort'],
        'infix': !exists(json, 'infix') ? undefined : json['infix'],
        'numDim': !exists(json, 'num_dim') ? undefined : json['num_dim'],
        'drop': !exists(json, 'drop') ? undefined : json['drop'],
        'embed': !exists(json, 'embed') ? undefined : FieldEmbedFromJSON(json['embed']),
    };
}

export function FieldToJSON(value?: Field | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'type': value.type,
        'optional': value.optional,
        'facet': value.facet,
        'index': value.index,
        'locale': value.locale,
        'sort': value.sort,
        'infix': value.infix,
        'num_dim': value.numDim,
        'drop': value.drop,
        'embed': FieldEmbedToJSON(value.embed),
    };
}

