/* tslint:disable */
/* eslint-disable */
/**
 * Typesense API
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 0.25.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MultiSearchCollectionParameters } from './MultiSearchCollectionParameters';
import {
    MultiSearchCollectionParametersFromJSON,
    MultiSearchCollectionParametersFromJSONTyped,
    MultiSearchCollectionParametersToJSON,
} from './MultiSearchCollectionParameters';

/**
 * 
 * @export
 * @interface MultiSearchSearchesParameter
 */
export interface MultiSearchSearchesParameter {
    /**
     * 
     * @type {Array<MultiSearchCollectionParameters>}
     * @memberof MultiSearchSearchesParameter
     */
    searches: Array<MultiSearchCollectionParameters>;
}

/**
 * Check if a given object implements the MultiSearchSearchesParameter interface.
 */
export function instanceOfMultiSearchSearchesParameter(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "searches" in value;

    return isInstance;
}

export function MultiSearchSearchesParameterFromJSON(json: any): MultiSearchSearchesParameter {
    return MultiSearchSearchesParameterFromJSONTyped(json, false);
}

export function MultiSearchSearchesParameterFromJSONTyped(json: any, ignoreDiscriminator: boolean): MultiSearchSearchesParameter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'searches': ((json['searches'] as Array<any>).map(MultiSearchCollectionParametersFromJSON)),
    };
}

export function MultiSearchSearchesParameterToJSON(value?: MultiSearchSearchesParameter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'searches': ((value.searches as Array<any>).map(MultiSearchCollectionParametersToJSON)),
    };
}

