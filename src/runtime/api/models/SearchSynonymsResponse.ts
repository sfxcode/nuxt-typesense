/* tslint:disable */
/* eslint-disable */
/**
 * Typesense API
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 0.24.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SearchSynonym } from './SearchSynonym';
import {
    SearchSynonymFromJSON,
    SearchSynonymFromJSONTyped,
    SearchSynonymToJSON,
} from './SearchSynonym';

/**
 * 
 * @export
 * @interface SearchSynonymsResponse
 */
export interface SearchSynonymsResponse {
    /**
     * 
     * @type {Array<SearchSynonym>}
     * @memberof SearchSynonymsResponse
     */
    synonyms: Array<SearchSynonym>;
}

/**
 * Check if a given object implements the SearchSynonymsResponse interface.
 */
export function instanceOfSearchSynonymsResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "synonyms" in value;

    return isInstance;
}

export function SearchSynonymsResponseFromJSON(json: any): SearchSynonymsResponse {
    return SearchSynonymsResponseFromJSONTyped(json, false);
}

export function SearchSynonymsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchSynonymsResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'synonyms': ((json['synonyms'] as Array<any>).map(SearchSynonymFromJSON)),
    };
}

export function SearchSynonymsResponseToJSON(value?: SearchSynonymsResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'synonyms': ((value.synonyms as Array<any>).map(SearchSynonymToJSON)),
    };
}

