/* tslint:disable */
/* eslint-disable */
/**
 * Typesense API
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 0.25.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SearchResultHit } from './SearchResultHit';
import {
    SearchResultHitFromJSON,
    SearchResultHitFromJSONTyped,
    SearchResultHitToJSON,
} from './SearchResultHit';

/**
 * 
 * @export
 * @interface SearchGroupedHit
 */
export interface SearchGroupedHit {
    /**
     * 
     * @type {number}
     * @memberof SearchGroupedHit
     */
    found?: number;
    /**
     * 
     * @type {Array<any>}
     * @memberof SearchGroupedHit
     */
    groupKey: Array<any>;
    /**
     * The documents that matched the search query
     * @type {Array<SearchResultHit>}
     * @memberof SearchGroupedHit
     */
    hits: Array<SearchResultHit>;
}

/**
 * Check if a given object implements the SearchGroupedHit interface.
 */
export function instanceOfSearchGroupedHit(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "groupKey" in value;
    isInstance = isInstance && "hits" in value;

    return isInstance;
}

export function SearchGroupedHitFromJSON(json: any): SearchGroupedHit {
    return SearchGroupedHitFromJSONTyped(json, false);
}

export function SearchGroupedHitFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchGroupedHit {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'found': !exists(json, 'found') ? undefined : json['found'],
        'groupKey': json['group_key'],
        'hits': ((json['hits'] as Array<any>).map(SearchResultHitFromJSON)),
    };
}

export function SearchGroupedHitToJSON(value?: SearchGroupedHit | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'found': value.found,
        'group_key': value.groupKey,
        'hits': ((value.hits as Array<any>).map(SearchResultHitToJSON)),
    };
}

