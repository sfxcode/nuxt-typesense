/* tslint:disable */
/* eslint-disable */
/**
 * Typesense API
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 0.24.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FacetCounts } from './FacetCounts';
import {
    FacetCountsFromJSON,
    FacetCountsFromJSONTyped,
    FacetCountsToJSON,
} from './FacetCounts';
import type { SearchGroupedHit } from './SearchGroupedHit';
import {
    SearchGroupedHitFromJSON,
    SearchGroupedHitFromJSONTyped,
    SearchGroupedHitToJSON,
} from './SearchGroupedHit';
import type { SearchResultHit } from './SearchResultHit';
import {
    SearchResultHitFromJSON,
    SearchResultHitFromJSONTyped,
    SearchResultHitToJSON,
} from './SearchResultHit';
import type { SearchResultRequestParams } from './SearchResultRequestParams';
import {
    SearchResultRequestParamsFromJSON,
    SearchResultRequestParamsFromJSONTyped,
    SearchResultRequestParamsToJSON,
} from './SearchResultRequestParams';

/**
 * 
 * @export
 * @interface SearchResult
 */
export interface SearchResult {
    /**
     * 
     * @type {Array<FacetCounts>}
     * @memberof SearchResult
     */
    facetCounts?: Array<FacetCounts>;
    /**
     * The number of documents found
     * @type {number}
     * @memberof SearchResult
     */
    found?: number;
    /**
     * The number of milliseconds the search took
     * @type {number}
     * @memberof SearchResult
     */
    searchTimeMs?: number;
    /**
     * The total number of documents in the collection
     * @type {number}
     * @memberof SearchResult
     */
    outOf?: number;
    /**
     * Whether the search was cut off
     * @type {boolean}
     * @memberof SearchResult
     */
    searchCutoff?: boolean;
    /**
     * The search result page number
     * @type {number}
     * @memberof SearchResult
     */
    page?: number;
    /**
     * 
     * @type {Array<SearchGroupedHit>}
     * @memberof SearchResult
     */
    groupedHits?: Array<SearchGroupedHit>;
    /**
     * The documents that matched the search query
     * @type {Array<SearchResultHit>}
     * @memberof SearchResult
     */
    hits?: Array<SearchResultHit>;
    /**
     * 
     * @type {SearchResultRequestParams}
     * @memberof SearchResult
     */
    requestParams?: SearchResultRequestParams;
}

/**
 * Check if a given object implements the SearchResult interface.
 */
export function instanceOfSearchResult(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SearchResultFromJSON(json: any): SearchResult {
    return SearchResultFromJSONTyped(json, false);
}

export function SearchResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'facetCounts': !exists(json, 'facet_counts') ? undefined : ((json['facet_counts'] as Array<any>).map(FacetCountsFromJSON)),
        'found': !exists(json, 'found') ? undefined : json['found'],
        'searchTimeMs': !exists(json, 'search_time_ms') ? undefined : json['search_time_ms'],
        'outOf': !exists(json, 'out_of') ? undefined : json['out_of'],
        'searchCutoff': !exists(json, 'search_cutoff') ? undefined : json['search_cutoff'],
        'page': !exists(json, 'page') ? undefined : json['page'],
        'groupedHits': !exists(json, 'grouped_hits') ? undefined : ((json['grouped_hits'] as Array<any>).map(SearchGroupedHitFromJSON)),
        'hits': !exists(json, 'hits') ? undefined : ((json['hits'] as Array<any>).map(SearchResultHitFromJSON)),
        'requestParams': !exists(json, 'request_params') ? undefined : SearchResultRequestParamsFromJSON(json['request_params']),
    };
}

export function SearchResultToJSON(value?: SearchResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'facet_counts': value.facetCounts === undefined ? undefined : ((value.facetCounts as Array<any>).map(FacetCountsToJSON)),
        'found': value.found,
        'search_time_ms': value.searchTimeMs,
        'out_of': value.outOf,
        'search_cutoff': value.searchCutoff,
        'page': value.page,
        'grouped_hits': value.groupedHits === undefined ? undefined : ((value.groupedHits as Array<any>).map(SearchGroupedHitToJSON)),
        'hits': value.hits === undefined ? undefined : ((value.hits as Array<any>).map(SearchResultHitToJSON)),
        'request_params': SearchResultRequestParamsToJSON(value.requestParams),
    };
}

