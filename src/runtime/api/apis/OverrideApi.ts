/* tslint:disable */
/* eslint-disable */
/**
 * Typesense API
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 0.24.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SearchOverride,
} from '../models';
import {
    SearchOverrideFromJSON,
    SearchOverrideToJSON,
} from '../models';

export interface GetSearchOverrideRequest {
    collectionName: string;
    overrideId: string;
}

/**
 * 
 */
export class OverrideApi extends runtime.BaseAPI {

    /**
     * Retrieve the details of a search override, given its id.
     * Retrieve a single search override
     */
    async getSearchOverrideRaw(requestParameters: GetSearchOverrideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchOverride>> {
        if (requestParameters.collectionName === null || requestParameters.collectionName === undefined) {
            throw new runtime.RequiredError('collectionName','Required parameter requestParameters.collectionName was null or undefined when calling getSearchOverride.');
        }

        if (requestParameters.overrideId === null || requestParameters.overrideId === undefined) {
            throw new runtime.RequiredError('overrideId','Required parameter requestParameters.overrideId was null or undefined when calling getSearchOverride.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TYPESENSE-API-KEY"] = this.configuration.apiKey("X-TYPESENSE-API-KEY"); // api_key_header authentication
        }

        const response = await this.request({
            path: `/collections/{collectionName}/overrides/{overrideId}`.replace(`{${"collectionName"}}`, encodeURIComponent(String(requestParameters.collectionName))).replace(`{${"overrideId"}}`, encodeURIComponent(String(requestParameters.overrideId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchOverrideFromJSON(jsonValue));
    }

    /**
     * Retrieve the details of a search override, given its id.
     * Retrieve a single search override
     */
    async getSearchOverride(requestParameters: GetSearchOverrideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchOverride> {
        const response = await this.getSearchOverrideRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
