/* tslint:disable */
/* eslint-disable */
/**
 * Typesense API
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 0.25.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ModelApiResponse,
  SearchOverride,
  SearchOverrideSchema,
  SearchOverridesResponse,
} from '../models';
import {
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
    SearchOverrideFromJSON,
    SearchOverrideToJSON,
    SearchOverrideSchemaFromJSON,
    SearchOverrideSchemaToJSON,
    SearchOverridesResponseFromJSON,
    SearchOverridesResponseToJSON,
} from '../models';

export interface DeleteSearchOverrideRequest {
    collectionName: string;
    overrideId: string;
}

export interface GetSearchOverridesRequest {
    collectionName: string;
}

export interface UpsertSearchOverrideRequest {
    collectionName: string;
    overrideId: string;
    searchOverrideSchema: SearchOverrideSchema;
}

/**
 * 
 */
export class PromoteApi extends runtime.BaseAPI {

    /**
     * Delete an override associated with a collection
     */
    async deleteSearchOverrideRaw(requestParameters: DeleteSearchOverrideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchOverride>> {
        if (requestParameters.collectionName === null || requestParameters.collectionName === undefined) {
            throw new runtime.RequiredError('collectionName','Required parameter requestParameters.collectionName was null or undefined when calling deleteSearchOverride.');
        }

        if (requestParameters.overrideId === null || requestParameters.overrideId === undefined) {
            throw new runtime.RequiredError('overrideId','Required parameter requestParameters.overrideId was null or undefined when calling deleteSearchOverride.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TYPESENSE-API-KEY"] = this.configuration.apiKey("X-TYPESENSE-API-KEY"); // api_key_header authentication
        }

        const response = await this.request({
            path: `/collections/{collectionName}/overrides/{overrideId}`.replace(`{${"collectionName"}}`, encodeURIComponent(String(requestParameters.collectionName))).replace(`{${"overrideId"}}`, encodeURIComponent(String(requestParameters.overrideId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchOverrideFromJSON(jsonValue));
    }

    /**
     * Delete an override associated with a collection
     */
    async deleteSearchOverride(requestParameters: DeleteSearchOverrideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchOverride> {
        const response = await this.deleteSearchOverrideRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all collection overrides
     */
    async getSearchOverridesRaw(requestParameters: GetSearchOverridesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchOverridesResponse>> {
        if (requestParameters.collectionName === null || requestParameters.collectionName === undefined) {
            throw new runtime.RequiredError('collectionName','Required parameter requestParameters.collectionName was null or undefined when calling getSearchOverrides.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TYPESENSE-API-KEY"] = this.configuration.apiKey("X-TYPESENSE-API-KEY"); // api_key_header authentication
        }

        const response = await this.request({
            path: `/collections/{collectionName}/overrides`.replace(`{${"collectionName"}}`, encodeURIComponent(String(requestParameters.collectionName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchOverridesResponseFromJSON(jsonValue));
    }

    /**
     * List all collection overrides
     */
    async getSearchOverrides(requestParameters: GetSearchOverridesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchOverridesResponse> {
        const response = await this.getSearchOverridesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or update an override to promote certain documents over others. Using overrides, you can include or exclude specific documents for a given query.
     * Create or update an override to promote certain documents over others
     */
    async upsertSearchOverrideRaw(requestParameters: UpsertSearchOverrideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchOverride>> {
        if (requestParameters.collectionName === null || requestParameters.collectionName === undefined) {
            throw new runtime.RequiredError('collectionName','Required parameter requestParameters.collectionName was null or undefined when calling upsertSearchOverride.');
        }

        if (requestParameters.overrideId === null || requestParameters.overrideId === undefined) {
            throw new runtime.RequiredError('overrideId','Required parameter requestParameters.overrideId was null or undefined when calling upsertSearchOverride.');
        }

        if (requestParameters.searchOverrideSchema === null || requestParameters.searchOverrideSchema === undefined) {
            throw new runtime.RequiredError('searchOverrideSchema','Required parameter requestParameters.searchOverrideSchema was null or undefined when calling upsertSearchOverride.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TYPESENSE-API-KEY"] = this.configuration.apiKey("X-TYPESENSE-API-KEY"); // api_key_header authentication
        }

        const response = await this.request({
            path: `/collections/{collectionName}/overrides/{overrideId}`.replace(`{${"collectionName"}}`, encodeURIComponent(String(requestParameters.collectionName))).replace(`{${"overrideId"}}`, encodeURIComponent(String(requestParameters.overrideId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SearchOverrideSchemaToJSON(requestParameters.searchOverrideSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchOverrideFromJSON(jsonValue));
    }

    /**
     * Create or update an override to promote certain documents over others. Using overrides, you can include or exclude specific documents for a given query.
     * Create or update an override to promote certain documents over others
     */
    async upsertSearchOverride(requestParameters: UpsertSearchOverrideRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchOverride> {
        const response = await this.upsertSearchOverrideRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
