/* tslint:disable */
/* eslint-disable */
/**
 * Typesense API
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 0.24.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SuccessStatus,
} from '../models';
import {
    SuccessStatusFromJSON,
    SuccessStatusToJSON,
} from '../models';

export interface TakeSnapshotRequest {
    snapshotPath: string;
}

/**
 * 
 */
export class OperationsApi extends runtime.BaseAPI {

    /**
     * Creates a point-in-time snapshot of a Typesense node\'s state and data in the specified directory. You can then backup the snapshot directory that gets created and later restore it as a data directory, as needed.
     * Creates a point-in-time snapshot of a Typesense node\'s state and data in the specified directory.
     */
    async takeSnapshotRaw(requestParameters: TakeSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessStatus>> {
        if (requestParameters.snapshotPath === null || requestParameters.snapshotPath === undefined) {
            throw new runtime.RequiredError('snapshotPath','Required parameter requestParameters.snapshotPath was null or undefined when calling takeSnapshot.');
        }

        const queryParameters: any = {};

        if (requestParameters.snapshotPath !== undefined) {
            queryParameters['snapshot_path'] = requestParameters.snapshotPath;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TYPESENSE-API-KEY"] = this.configuration.apiKey("X-TYPESENSE-API-KEY"); // api_key_header authentication
        }

        const response = await this.request({
            path: `/operations/snapshot`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessStatusFromJSON(jsonValue));
    }

    /**
     * Creates a point-in-time snapshot of a Typesense node\'s state and data in the specified directory. You can then backup the snapshot directory that gets created and later restore it as a data directory, as needed.
     * Creates a point-in-time snapshot of a Typesense node\'s state and data in the specified directory.
     */
    async takeSnapshot(requestParameters: TakeSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessStatus> {
        const response = await this.takeSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Triggers a follower node to initiate the raft voting process, which triggers leader re-election. The follower node that you run this operation against will become the new leader, once this command succeeds.
     * Triggers a follower node to initiate the raft voting process, which triggers leader re-election.
     */
    async voteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuccessStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TYPESENSE-API-KEY"] = this.configuration.apiKey("X-TYPESENSE-API-KEY"); // api_key_header authentication
        }

        const response = await this.request({
            path: `/operations/vote`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessStatusFromJSON(jsonValue));
    }

    /**
     * Triggers a follower node to initiate the raft voting process, which triggers leader re-election. The follower node that you run this operation against will become the new leader, once this command succeeds.
     * Triggers a follower node to initiate the raft voting process, which triggers leader re-election.
     */
    async vote(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuccessStatus> {
        const response = await this.voteRaw(initOverrides);
        return await response.value();
    }

}
