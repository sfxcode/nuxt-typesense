/* tslint:disable */
/* eslint-disable */
/**
 * Typesense API
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 0.25.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CollectionAlias,
  CollectionAliasSchema,
  CollectionAliasesResponse,
  CollectionResponse,
  CollectionSchema,
  CollectionUpdateSchema,
  ModelApiResponse,
} from '../models';
import {
    CollectionAliasFromJSON,
    CollectionAliasToJSON,
    CollectionAliasSchemaFromJSON,
    CollectionAliasSchemaToJSON,
    CollectionAliasesResponseFromJSON,
    CollectionAliasesResponseToJSON,
    CollectionResponseFromJSON,
    CollectionResponseToJSON,
    CollectionSchemaFromJSON,
    CollectionSchemaToJSON,
    CollectionUpdateSchemaFromJSON,
    CollectionUpdateSchemaToJSON,
    ModelApiResponseFromJSON,
    ModelApiResponseToJSON,
} from '../models';

export interface CreateCollectionRequest {
    collectionSchema: CollectionSchema;
}

export interface DeleteAliasRequest {
    aliasName: string;
}

export interface DeleteCollectionRequest {
    collectionName: string;
}

export interface GetAliasRequest {
    aliasName: string;
}

export interface GetCollectionRequest {
    collectionName: string;
}

export interface UpdateCollectionRequest {
    collectionName: string;
    collectionUpdateSchema: CollectionUpdateSchema;
}

export interface UpsertAliasRequest {
    aliasName: string;
    collectionAliasSchema?: CollectionAliasSchema;
}

/**
 * 
 */
export class CollectionsApi extends runtime.BaseAPI {

    /**
     * When a collection is created, we give it a name and describe the fields that will be indexed from the documents added to the collection.
     * Create a new collection
     */
    async createCollectionRaw(requestParameters: CreateCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionResponse>> {
        if (requestParameters.collectionSchema === null || requestParameters.collectionSchema === undefined) {
            throw new runtime.RequiredError('collectionSchema','Required parameter requestParameters.collectionSchema was null or undefined when calling createCollection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TYPESENSE-API-KEY"] = this.configuration.apiKey("X-TYPESENSE-API-KEY"); // api_key_header authentication
        }

        const response = await this.request({
            path: `/collections`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CollectionSchemaToJSON(requestParameters.collectionSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionResponseFromJSON(jsonValue));
    }

    /**
     * When a collection is created, we give it a name and describe the fields that will be indexed from the documents added to the collection.
     * Create a new collection
     */
    async createCollection(requestParameters: CreateCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionResponse> {
        const response = await this.createCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an alias
     */
    async deleteAliasRaw(requestParameters: DeleteAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionAlias>> {
        if (requestParameters.aliasName === null || requestParameters.aliasName === undefined) {
            throw new runtime.RequiredError('aliasName','Required parameter requestParameters.aliasName was null or undefined when calling deleteAlias.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TYPESENSE-API-KEY"] = this.configuration.apiKey("X-TYPESENSE-API-KEY"); // api_key_header authentication
        }

        const response = await this.request({
            path: `/aliases/{aliasName}`.replace(`{${"aliasName"}}`, encodeURIComponent(String(requestParameters.aliasName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionAliasFromJSON(jsonValue));
    }

    /**
     * Delete an alias
     */
    async deleteAlias(requestParameters: DeleteAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionAlias> {
        const response = await this.deleteAliasRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Permanently drops a collection. This action cannot be undone. For large collections, this might have an impact on read latencies.
     * Delete a collection
     */
    async deleteCollectionRaw(requestParameters: DeleteCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionResponse>> {
        if (requestParameters.collectionName === null || requestParameters.collectionName === undefined) {
            throw new runtime.RequiredError('collectionName','Required parameter requestParameters.collectionName was null or undefined when calling deleteCollection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TYPESENSE-API-KEY"] = this.configuration.apiKey("X-TYPESENSE-API-KEY"); // api_key_header authentication
        }

        const response = await this.request({
            path: `/collections/{collectionName}`.replace(`{${"collectionName"}}`, encodeURIComponent(String(requestParameters.collectionName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionResponseFromJSON(jsonValue));
    }

    /**
     * Permanently drops a collection. This action cannot be undone. For large collections, this might have an impact on read latencies.
     * Delete a collection
     */
    async deleteCollection(requestParameters: DeleteCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionResponse> {
        const response = await this.deleteCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find out which collection an alias points to by fetching it
     * Retrieve an alias
     */
    async getAliasRaw(requestParameters: GetAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionAlias>> {
        if (requestParameters.aliasName === null || requestParameters.aliasName === undefined) {
            throw new runtime.RequiredError('aliasName','Required parameter requestParameters.aliasName was null or undefined when calling getAlias.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TYPESENSE-API-KEY"] = this.configuration.apiKey("X-TYPESENSE-API-KEY"); // api_key_header authentication
        }

        const response = await this.request({
            path: `/aliases/{aliasName}`.replace(`{${"aliasName"}}`, encodeURIComponent(String(requestParameters.aliasName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionAliasFromJSON(jsonValue));
    }

    /**
     * Find out which collection an alias points to by fetching it
     * Retrieve an alias
     */
    async getAlias(requestParameters: GetAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionAlias> {
        const response = await this.getAliasRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all aliases and the corresponding collections that they map to.
     * List all aliases
     */
    async getAliasesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionAliasesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TYPESENSE-API-KEY"] = this.configuration.apiKey("X-TYPESENSE-API-KEY"); // api_key_header authentication
        }

        const response = await this.request({
            path: `/aliases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionAliasesResponseFromJSON(jsonValue));
    }

    /**
     * List all aliases and the corresponding collections that they map to.
     * List all aliases
     */
    async getAliases(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionAliasesResponse> {
        const response = await this.getAliasesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the details of a collection, given its name.
     * Retrieve a single collection
     */
    async getCollectionRaw(requestParameters: GetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionResponse>> {
        if (requestParameters.collectionName === null || requestParameters.collectionName === undefined) {
            throw new runtime.RequiredError('collectionName','Required parameter requestParameters.collectionName was null or undefined when calling getCollection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TYPESENSE-API-KEY"] = this.configuration.apiKey("X-TYPESENSE-API-KEY"); // api_key_header authentication
        }

        const response = await this.request({
            path: `/collections/{collectionName}`.replace(`{${"collectionName"}}`, encodeURIComponent(String(requestParameters.collectionName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the details of a collection, given its name.
     * Retrieve a single collection
     */
    async getCollection(requestParameters: GetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionResponse> {
        const response = await this.getCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a summary of all your collections. The collections are returned sorted by creation date, with the most recent collections appearing first.
     * List all collections
     */
    async getCollectionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CollectionResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TYPESENSE-API-KEY"] = this.configuration.apiKey("X-TYPESENSE-API-KEY"); // api_key_header authentication
        }

        const response = await this.request({
            path: `/collections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CollectionResponseFromJSON));
    }

    /**
     * Returns a summary of all your collections. The collections are returned sorted by creation date, with the most recent collections appearing first.
     * List all collections
     */
    async getCollections(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CollectionResponse>> {
        const response = await this.getCollectionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update a collection\'s schema to modify the fields and their types.
     * Update a collection
     */
    async updateCollectionRaw(requestParameters: UpdateCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionUpdateSchema>> {
        if (requestParameters.collectionName === null || requestParameters.collectionName === undefined) {
            throw new runtime.RequiredError('collectionName','Required parameter requestParameters.collectionName was null or undefined when calling updateCollection.');
        }

        if (requestParameters.collectionUpdateSchema === null || requestParameters.collectionUpdateSchema === undefined) {
            throw new runtime.RequiredError('collectionUpdateSchema','Required parameter requestParameters.collectionUpdateSchema was null or undefined when calling updateCollection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TYPESENSE-API-KEY"] = this.configuration.apiKey("X-TYPESENSE-API-KEY"); // api_key_header authentication
        }

        const response = await this.request({
            path: `/collections/{collectionName}`.replace(`{${"collectionName"}}`, encodeURIComponent(String(requestParameters.collectionName))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CollectionUpdateSchemaToJSON(requestParameters.collectionUpdateSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionUpdateSchemaFromJSON(jsonValue));
    }

    /**
     * Update a collection\'s schema to modify the fields and their types.
     * Update a collection
     */
    async updateCollection(requestParameters: UpdateCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionUpdateSchema> {
        const response = await this.updateCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or update a collection alias. An alias is a virtual collection name that points to a real collection. If you\'re familiar with symbolic links on Linux, it\'s very similar to that. Aliases are useful when you want to reindex your data in the background on a new collection and switch your application to it without any changes to your code.
     * Create or update a collection alias
     */
    async upsertAliasRaw(requestParameters: UpsertAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectionAlias>> {
        if (requestParameters.aliasName === null || requestParameters.aliasName === undefined) {
            throw new runtime.RequiredError('aliasName','Required parameter requestParameters.aliasName was null or undefined when calling upsertAlias.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-TYPESENSE-API-KEY"] = this.configuration.apiKey("X-TYPESENSE-API-KEY"); // api_key_header authentication
        }

        const response = await this.request({
            path: `/aliases/{aliasName}`.replace(`{${"aliasName"}}`, encodeURIComponent(String(requestParameters.aliasName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CollectionAliasSchemaToJSON(requestParameters.collectionAliasSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionAliasFromJSON(jsonValue));
    }

    /**
     * Create or update a collection alias. An alias is a virtual collection name that points to a real collection. If you\'re familiar with symbolic links on Linux, it\'s very similar to that. Aliases are useful when you want to reindex your data in the background on a new collection and switch your application to it without any changes to your code.
     * Create or update a collection alias
     */
    async upsertAlias(requestParameters: UpsertAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectionAlias> {
        const response = await this.upsertAliasRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
